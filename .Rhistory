x <- c(5, x); y <- c(5, y)
plot(x, y, frame = FALSE, cex = 2, pch = 21, bg = "lightblue", col = "black")
fit2 <- lm(y ~ x)
abline(fit2)
round(dfbetas(fit2)[1 : 10, 2], 3)
round(hatvalues(fit2)[1 : 10], 3)
dat <- read.table('http://www4.stat.ncsu.edu/~stefanski/NSF_Supported/Hidden_Images/orly_owl_files/orly_owl_Lin_4p_5_flat.txt', header = FALSE)
pairs(dat)
summary(lm(V1 ~ . -1, data = dat))$coef
fit <- lm(V1 ~ . - 1, data = dat); plot(predict(fit), resid(fit), pch = '.')
data(swiss); par(mfrow = c(2, 2))
fit <- lm(Fertility ~ . , data = swiss); plot(fit)
lev
n <- 100
plot(c(1, n), 0 : 1, type = "n", frame = FALSE, xlab = "p", ylab = "R^2")
r <- sapply(1 : n, function(p)
{
y <- rnorm(n); x <- matrix(rnorm(n * p), n, p)
summary(lm(y ~ x))$r.squared
}
)
lines(1 : n, r, lwd = 2)
abline(h = 1)
windows()
lines(1 : n, r, lwd = 2)
abline(h = 1)
n <- 100
plot(c(1, n), 0 : 1, type = "n", frame = FALSE, xlab = "p", ylab = "R^2")
r <- sapply(1 : n, function(p)
{
y <- rnorm(n); x <- matrix(rnorm(n * p), n, p)
summary(lm(y ~ x))$r.squared
}
)
lines(1 : n, r, lwd = 2)
abline(h = 1)
par(mfrow=c(1,1))
n <- 100
plot(c(1, n), 0 : 1, type = "n", frame = FALSE, xlab = "p", ylab = "R^2")
r <- sapply(1 : n, function(p)
{
y <- rnorm(n); x <- matrix(rnorm(n * p), n, p)
summary(lm(y ~ x))$r.squared
}
)
lines(1 : n, r, lwd = 2)
abline(h = 1)
n <- 100; nosim <- 1000
n <- 100; nosim <- 1000
x1 <- rnorm(n); x2 <- rnorm(n); x3 <- rnorm(n);
betas <- sapply(1 : nosim, function(i){
y <- x1 + rnorm(n, sd = .3)
c(coef(lm(y ~ x1))[2],
coef(lm(y ~ x1 + x2))[2],
coef(lm(y ~ x1 + x2 + x3))[2])
})
round(apply(betas, 1, sd), 5)
n <- 100; nosim <- 1000
x1 <- rnorm(n); x2 <- rnorm(n); x3 <- rnorm(n);
betas <- sapply(1 : nosim, function(i){
y <- x1 + rnorm(n, sd = .3)
c(coef(lm(y ~ x1))[2],
coef(lm(y ~ x1 + x2))[2],
coef(lm(y ~ x1 + x2 + x3))[2])
})
round(apply(betas, 1, sd), 5)
y <- x1 + rnorm(n, sd = .3)
a <- summary(lm(y ~ x1))$cov.unscaled[2,2]
c(summary(lm(y ~ x1 + x2))$cov.unscaled[2,2],
summary(lm(y~ x1 + x2 + x3))$cov.unscaled[2,2]) / a
temp <- apply(betas, 1, var); temp[2 : 3] / temp[1]
n <- 100; nosim <- 1000
x1 <- rnorm(n); x2 <- x1/sqrt(2) + rnorm(n) /sqrt(2)
x3 <- x1 * 0.95 + rnorm(n) * sqrt(1 - 0.95^2);
betas <- sapply(1 : nosim, function(i){
y <- x1 + rnorm(n, sd = .3)
c(coef(lm(y ~ x1))[2],
coef(lm(y ~ x1 + x2))[2],
coef(lm(y ~ x1 + x2 + x3))[2])
})
round(apply(betas, 1, sd), 5)
fit <- lm(Fertility ~ . , data = swiss)
vif(fit)
sqrt(vif(fit))
library(car)
install.packages("car")
fit <- lm(Fertility ~ . , data = swiss)
vif(fit)
sqrt(vif(fit))
library(car)
install.packages("car")
library(car)
install.packages("nloptr")
library(car)
fit <- lm(Fertility ~ . , data = swiss)
vif(fit)
sqrt(vif(fit))
fit1 <- lm(Fertility ~ Agriculture, data = swiss)
fit3 <- update(fit, Fertility ~ Agriculture + Examination + Education)
fit5 <- update(fit, Fertility ~ Agriculture + Examination + Education + Catholic + Infant.Mortality)
anova(fit1, fit3, fit5)
fit1 <- lm(Fertility ~ Agriculture, data = swiss)
fit3 <- update(fit1, Fertility ~ Agriculture + Examination + Education)
fit5 <- update(fit1, Fertility ~ Agriculture + Examination + Education + Catholic + Infant.Mortality)
anova(fit1, fit3, fit5)
x1<-1:100
x2<-rnorm(100)
c<-5
noise<-rnorm(n=100,mean=0,sd=.1)
y<-c+x1+noise
fit1<-lm(y~x1)
fit2<-lm(y~x1+x2)
anova(fit1,ffit)
anova(fit1,fit2)
summary.lm(fit1)
summary.lm(fit2)
data(mtcars)
head(mtcars)
fit<-lm(mpg~wt * factor(cyl))
fit<-lm(mpg~wt * factor(cyl),data=mtcars)
fit$coefficients
mean(subset(mtcars,cyl==4))
mean(subset(mtcars$cyl==4))
mean(subset(mtcars$cyl=="4"))
mean(subset(mtcars,cyl=="4"))
fit$coefficients[1]-fit$coefficients[2]
fit$coefficients[1]+fit$coefficients[2]
fit<-lm(mpg~wt + factor(cyl),data=mtcars)
fit$coefficients
fit$coefficients[4]+fit$coefficients[2]
fit$coefficients[4]-fit$coefficients[2]
fit1<-lm(mpg~wt + factor(cyl),data=mtcars)
fit2<-lm(mpg~factor(cyl),data=mtcars)
fit1$coefficients
fit2$coefficients
fit1<-lm(mpg~wt + factor(cyl),data=mtcars)
fit2<-lm(mpg~wt * factor(cyl),data=mtcars)
anova(fit1,fit2)
fit2<-lm(mpg ~ I(wt * 0.5) + factor(cyl), data = mtcars)
fit1$coefficients
fit2$coefficients
x <- c(0.586, 0.166, -0.042, -0.614, 11.72)
y <- c(0.549, -0.026, -0.127, -0.751, 1.344)
phat
hatvalues(lm(y~x))
x <- c(0.586, 0.166, -0.042, -0.614, 11.72)
y <- c(0.549, -0.026, -0.127, -0.751, 1.344)
dfbeta(lm(y~x))
influence.measure(lm(y~x))
influence.measures(lm(y~x))
fit1<-lm(y~x)
fit2<-lm(c(0.586, 0.166, -0.042, -0.614)~c(0.549, -0.026, -0.127, -0.751))
fit1$coefficients
fit2$coefficients
fit2<-lm(c(0.549, -0.026, -0.127, -0.751)~c(0.586, 0.166, -0.042, -0.614))
fit1$coefficients
fit2$coefficients
fit1$coefficients[2]/fit2$coefficients[2]
(fit1$coefficients[2])/(fit2$coefficients[2])
1.0601519/0.1288595
summary.lm(fit1)
(0.1289-1.0601519)/0.2354
(0.1289-1.0601519)/0.0448
influence.measures(fit1)
summary.lm(fit2)
(0.1289-1.0601519)/0.08450
dfbetas(lm(y~x))
rm(list=ls())
```{r,echo=FALSE}
---
title: "Regression Models Course Project"
author: "Daniel Alaiev"
date: "October 19, 2015"
output: html_document
---
This is an R Markdown document. Markdown is a simple formatting syntax for authoring HTML, PDF, and MS Word documents. For more details on using R Markdown see <http://rmarkdown.rstudio.com>.
When you click the **Knit** button a document will be generated that includes both content as well as the output of any embedded R code chunks within the document. You can embed an R code chunk like this:
```{r,echo=FALSE}
summary(cars)
```
You can also embed plots, for example:
```{r, echo=FALSE}
plot(cars)
```
Note that the `echo = FALSE` parameter was added to the code chunk to prevent printing of the R code that generated the plot.
---
title: "Regression Models Course Project"
author: "Daniel Alaiev"
date: "October 19, 2015"
output: html_document
---
##Executive Summary
data(mtcars)
plot(mtcars)
library(GGally)
ggpairs(data=mtcars)
windows()
ggpairs(data=mtcars)
11^2
32(32-1)
32*(32-1)
32^2-32
11*(11-1)
cor(mtcars$mpg,mtcars$cyl)
cor(mtcars$am,mtcars$cyl)
plot(mtcars)
View(mtcars)
cor(mtcars,y=mtcars$mpg)
plot(cor(mtcars,y=mtcars$mpg))
plot(cor(mtcars$mpg))
plot(cor(mtcars))
cor(mtcars)
data(mtcars)
library(GGally)
pairs.plot<-ggpairs(data=mtcars)
pairs.plot
dims(cor(mtcars))
dim(cor(mtcars))
windows()
plot(density(mtcars$mpg))
plot(log(density(mtcars$mpg)))
plot((density(log(mtcars$mpg)))
)
library(moments)
skewness(mtcars[,1:11])
kurtosis(mtcars[,1:11])
mean(kurtosis(mtcars[,1:11]))
mean(skewness(mtcars[,1:11]))
jarque.test(mtcars[,1])
jarque.test(mtcars[,1:11])
for(i in 1:11) jarque.test(mtcars[,i])
for(i in 1:11) {jarque.test(mtcars[,i])}
for(i in 1:11){jarque.test(mtcars[,i])}
for(i in 1:11)
{jarque.test(mtcars[,i])}
jarque.test(mtcars[,1])
jarque.test(mtcars[,i])
average.skew<-round(mean(skewness(mtcars[,1:11])),2)
average.kurt<-round(mean(kurtosis(mtcars[,1:11])),2)
x <- rnorm( 1000 )
jarque.test( x )
average.skew<-round(median(skewness(mtcars[,1:11])),2)
average.kurt<-round(median(kurtosis(mtcars[,1:11])),2)
average.skew<-round(mean(skewness(mtcars[,1:11])),2)
average.kurt<-round(mean(kurtosis(mtcars[,1:11])),2)
set.seed(1234)
kurtosis(rnorm(1000))
set.seed(1234)
kurtosis(rnorm(1000))
set.seed(1234)
kurtosis(rnorm(100000))
set.seed(1234)
kurtosis(rnorm(1000000))
jarque.test(rnorm(10000))
jarque.test(rnorm(100000))
jarque.test(rnorm(1000000))
(11-average.kurt)/6*(average.skew^2+.25*(average.kurt-3)^2)
(32*11-average.kurt)/6*(average.skew^2+.25*(average.kurt-3)^2)
pairs.plot<-ggpairs(mtcars) +
theme(axis.line=element_blank(),
axis.text=element_blank(),
axis.ticks=element_blank())
data(mtcars)
library(GGally)
library(ggplot2)
pairs.plot<-ggpairs(mtcars) +
theme(axis.line=element_blank(),
axis.text=element_blank(),
axis.ticks=element_blank())
pairs.plot
mtcars[,am==1]="Manual"
mtcars[,"am"==1]="Manual"
View(mtcars)
View(mtcars)
mtcars[,"am"==1]
mtcars[,am==1]
mtcars[,am]
col.names(mtcars)
column.names(mtcars)
colnames(mtcars)
colnames(mtcars)[9]
mtcars[,"am"]
mtcars[,"am"==1]="Manual"
mtcars[1,"am"]
mtcars[,"am"==1]<-"Manual"
View(mtcars)
mt.cars<-data(mtcars)
mt.cars
mt.cars<-data(mtcars)
mt.cars<-attach(mtcars)
View(mtcars)
colnames(mtcars)
View(mtcars)
mtcars[,"am"==1]<-"Manual"
mtcars[,"am"==0]<-"Automatic"
mtcars[,"vs"==1]<-"Straight"
mtcars[,"vs"==0]<-"V-engine"
colnames(mtcars)<-c("Miles/Gallon","Number of Cylinders","Displacement (cu.in.)","Gross Horsepower","Rear Axle Ratio","Weight (lb/1000)","1/4 mile time","Engine Type","Transmission Type","Number of Forward Gears","Number of Carburetors")
mtcars[,9==1]<-"Manual"
mtcars[,9==0]<-"Automatic"
mtcars[,8==1]<-"Straight"
mtcars[,8==0]<-"V-engine"
View(mtcars)
mtcars[,9==1]
data(mtcars)
mtcars$am==1<-"Manual"
mtcars$am==0<-"Automatic"
mtcars$vs<-"Straight"
mtcars$vs<-"V-engine"
mtcars$am
mtcars$am==1
mtcars[,am]
mtcars[,"am"]<-"Manual"
mtcars[,"am"]
data(mtcars)
mtcars[,"am"==1]
mtcars[,"am"=="1"]
class(mtcars[,"am"])
mtcars[,8=="1"]
mtcars[,"am"=="1"]
mtcars[,"am"==1]
mtcars[,"am"]==1
mtcars[,"am"]==1<-"Manual"
mtcars[,"am"]==0<-"Automatic"
mtcars$am==1
mtcars$am==1<-"Manual"
mtcars$am==1 <-"Manual"
(mtcars$am==1) <-"Manual"
if(mtcars[,"am"]==1) mtcars[,am]<-"Manual"
if(mtcars[,"am"]==1) (mtcars[,am]<-"Manual")
while(mtcars[,"am"]==1) (mtcars[,am]<-"Manual")
mtcars[mtcars[,"am"]==1]<-"Manual")
mtcars[mtcars[,"am"]==1]<-"Manual"
mtcars[mtcars[,"am"]==1]
mtcars[,mtcars[,"am"]==1]<-"Manual"
mtcars[mtcars[,"am"]==1,]<-"Manual"
data(mtcars)
mtcars[mtcars[,"am"]==1]<-"Manual"
mtcars[,mtcars[,"am"]==1]<-"Manual"
mtcars$am<-gsub(0,"Automatic")
mtcars$am<-gsub(0,"Automatic",mtcars$am)
mtcars$am<-gsub(1,"Manual",mtcars$am)
mtcars$vs<-gsub(0,"V-Engine",mtcars$am)
mtcars$vs<-gsub(1,"Straight Engine",mtcars$am)
colnames(mtcars)<-c("Miles/Gallon","Number of Cylinders","Displacement (cu.in.)","Gross Horsepower","Rear Axle Ratio","Weight (lb/1000)","1/4 mile time","Engine Type","Transmission Type","Number of Forward Gears","Number of Carburetors")
fit1<-lm(`Miles/Gallon`~`Transmission Type`,data=mtcars)
plot(fit1)
windows()
plot(fit1$residuals)
summary.lm(fit1)
mean(mtcars$`Miles/Gallon`[,mtcars$`Transmission Type`=="Manual"])
mean(mtcars$`Miles/Gallon`[mtcars$`Transmission Type`=="Manual"])
mean(mtcars$`Miles/Gallon`[mtcars$`Transmission Type`=="Automatic"])
fit1$coefficients
sum(fit1$coefficients)
fit1.manual.mpg<-round(sum(fit1$coefficients),2)
fit1.automatic.mpg<-round(fit1$coefficients[1])
fit1.manual.mpg<-round(sum(fit1$coefficients),2)
fit1.automatic.mpg<-round(fit1$coefficients[1],2)
unclass(fit1.automatic.mpg)
uname(fit1.automatic.mpg)
unname(fit1.automatic.mpg)
mean(fit1$residuals)
jarque.test(fit1$residuals)
jarque.test(rnorm(1000000))
jarque.test(rnorm(1000000))
qqnorm(fit1$residuals)
fit1.plot<-plot(fit1)
plot(fit1$residuals)
plot(fit1$residuals,distribution=rnorm)
qqnorm(fit1$residuals,distribution=rnorm())
qqnorm(fit1$residuals)
plot(lm)
plot(lm())
plot.lm(fit1)
probplot(x, qdist=qnorm)
qqnorm(fit1$residuals); qqline(fit1$residuals)
fit1.residual.qqplot.1<-qqnorm(fit1$residuals) fit1.residual.qqplot.2<-qqline(fit1$residuals)
fit1.residual.qqplot.1<-qqnorm(fit1$residuals)
fit1.residual.qqplot.1<-qqnorm(fit1$residuals)
fit1.residual.qqplot.1<-qqnorm(fit1$residuals)
fit1.residual.qqplot.1<-qqnorm(fit1$residuals)
fit1.residual.qqplot.1<-qqnorm(fit1$residuals,plot.it=F) fit1.residual.qqplot.2<-qqline(fit1$residuals,plot.it=F)
fit1.residual.qqplot.1<-qqnorm(fit1$residuals,plot.it=F)
fit1.residual.qqplot.2<-qqline(fit1$residuals,plot.it=F)
fit1.residual.qqplot.2<-qqline(fit1$residuals)
fit1.residual.qqplot.1<-qqnorm(fit1$residuals,plot.it=F) fit1.residual.qqplot.2<-qqline(fit1$residuals,plot=F)
fit1.residual.qqplot.1
plot(fit1.residual.qqplot.1)
plot(fit1.residual.qqplot.2)
plot(fit1.residual.qqplot.1)
fit1.residual.qqplot.2
qqline(fit1$residuals,plot=F)
abline(-2.25,1)
abline(-12,1)
abline(-10,1)
abline(-10,6)
fit1.residual.qqplot.1<-qqnorm(fit1$residuals,plot.it=F)
(1:100)/101
fit1.residual.qqplot.1
plot(fit1.residual.qqplot.1)
plot((32)/33)
plot((1:32)/33)
plot((1:32)/33,type="l")
abline((1:32)/33,type="l")
qqline(fit1$residuals,plot=F)
plot(fit1.residual.qqplot.1)
qqline(fit1$residuals,plot=F)
ggplot(fit1$residuals, aes(sample=fit1$residuals))+stat_qq()
ggplot(fit1, aes(sample=fit1$residuals))+stat_qq()
ggplot(fit1, aes(sample=fit1$residuals))+
stat_qq()+
geom_abline(intercept=-10,5)
ggplot(fit1, aes(sample=fit1$residuals))+
stat_qq()+
geom_abline(intercept=-1,10)
ggplot(fit1, aes(sample=fit1$residuals))+
stat_qq()+
geom_abline(intercept=-10,10)
ggplot(fit1, aes(sample=fit1$residuals))+
stat_qq()+
geom_abline(intercept=-5,10)
gplot(fit1, aes(sample=fit1$residuals))+
stat_qq()+
geom_abline(intercept=-2,10)
ggplot(fit1, aes(sample=fit1$residuals))+
stat_qq()+
geom_abline(intercept=-2,10)
ggplot(fit1, aes(sample=fit1$residuals))+
stat_qq()+
geom_abline(intercept=-2,20)
ggplot(fit1, aes(sample=fit1$residuals))+
stat_qq()+
geom_abline(intercept=-2,slope=20)
ggplot(fit1, aes(sample=fit1$residuals))+
stat_qq()+
geom_abline(intercept=-2,slope=10)
ggplot(fit1, aes(sample=fit1$residuals))+
stat_qq()+
geom_abline(intercept=-10,slope=5)
ggplot(fit1, aes(sample=fit1$residuals))+
stat_qq()+
geom_abline(intercept=0,slope=5)
fit1.qqplot<-ggplot(fit1, aes(sample=fit1$residuals)) +
stat_qq() +
geom_abline(intercept=0,slope=5) +
xlab("Theoretical Quantiles") +
ylab("Miles/Gallon ~ Transmission Type Residuals")
fit1.qqplot
plot(fit1$residuals)
fit1.qqplot<-ggplot(fit1, aes(sample=fit1$residuals)) +
stat_qq() +
geom_abline(intercept=0,slope=5) +
xlab("Theoretical Quantiles") +
ylab("Miles/Gallon ~ Transmission Type Residuals")
fit1<-lm(`Miles/Gallon`~`Transmission Type`,data=mtcars)
fit1.manual.mpg<-round(sum(fit1$coefficients),2)
fit1.automatic.mpg<-unname(round(fit1$coefficients[1],2))
rm(list=ls())
jarque.test(rnorm(10000))
jarque.test(ppois(10000))
jarque.test(ppois(10000,1))
jarque.test(ppois(100,1))
jarque.test(ppois(1,100))
ppos(1,1)
ppois(1,1)
ppois(1,1000)
jarque.test(rpois(100,1))
pairs.plot<-ggpairs(mtcars) +
theme(axis.line=element_blank(),
axis.text=element_blank(),
axis.ticks=element_blank())
average.skew<-round(mean(skewness(mtcars[,1:11])),2)
average.kurt<-round(mean(kurtosis(mtcars[,1:11])),2)
as.vector(head(mtcars))
class(as.vector(head(mtcars)))
data(mtcars)
mtcars$am<-gsub(0,"Automatic",mtcars$am)
mtcars$am<-gsub(1,"Manual",mtcars$am)
mtcars$vs<-gsub(0,"V-Engine",mtcars$am)
mtcars$vs<-gsub(1,"Straight Engine",mtcars$am)
colnames(mtcars)<-c("Miles/Gallon","Number of Cylinders","Displacement (cu.in.)","Gross Horsepower","Rear Axle Ratio","Weight (lb/1000)","1/4 mile time","Engine Type","Transmission Type","Number of Forward Gears","Number of Carburetors")
class(mtcars$`Number of Cylinders`)
class(mtcars$`Engine Type`)
fit1<-lm(`Miles/Gallon`~`Transmission Type`,data=mtcars)
fit1.manual.mpg<-round(sum(fit1$coefficients),2)
fit1.automatic.mpg<-unname(round(fit1$coefficients[1],2))
fit1.qqplot<-ggplot(fit1, aes(sample=fit1$residuals)) +
stat_qq() +
geom_abline(intercept=0,slope=5) +
xlab("Theoretical Quantiles") +
ylab("Miles/Gallon ~ Transmission Type Residuals")
cor(mtcars)
corr(mtcars)
cor(mtcars)
test<-cbind(rep(rnorm(30),11))
View(test)
rep(rnorm(10),2)
test<-cbind(rnorm(30),rnorm(30),rnorm(30),rnorm(30),rnorm(30),rnorm(30),rnorm(30),rnorm(30),rnorm(30),rnorm(30),rnorm(30)))
test<-cbind(rnorm(30),rnorm(30),rnorm(30),rnorm(30),rnorm(30),rnorm(30),rnorm(30),rnorm(30),rnorm(30),rnorm(30),rnorm(30))
View(test)
round(mean(skewness(test[,1:11])),2)
round(mean(kurtosis(test[,1:11])),2)
test<-cbind(rnorm(32),rnorm(32),rnorm(32),rnorm(32),rnorm(32),rnorm(32),rnorm(32),rnorm(32),rnorm(32),rnorm(32),rnorm(32))
test<-cbind(rnorm(32),rnorm(32),rnorm(32),rnorm(32),rnorm(32),rnorm(32),rnorm(32),rnorm(32),rnorm(32),rnorm(32),rnorm(32))
round(mean(skewness(test[,1:11])),2)
round(mean(kurtosis(test[,1:11])),2)
test<-cbind(rnorm(3200),rnorm(3200),rnorm(3200),rnorm(3200),rnorm(3200),rnorm(3200),rnorm(3200),rnorm(3200),rnorm(3200),rnorm(3200),rnorm(3200))
round(mean(skewness(test[,1:11])),2)
round(mean(kurtosis(test[,1:11])),2)
cor(mtcars)
class(mtcars)
